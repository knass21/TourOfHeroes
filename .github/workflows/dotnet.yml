# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: windows-latest
    env:
      config: "Release"

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

        # restore dependencies
      - name: Restore dependencies
        run: dotnet restore

        # build project
      - name: Build
        run: dotnet build --no-restore --configuration $config /p:ContinuousIntegrationBuild=true

      - name: set pr build number (if pr)
        id: PRNUMBER
        if: ${{ github.event_name == 'pull_request' }}
        uses: kkak10/pr-number-action@v1.3

        # set report file and title 
      - name: Set Test Title
        run: | 
              if ${{ github.event_name == 'pull_request' }}
              then
                echo "title=Test Run for PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
                echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV              
              else
                echo "title=Test Run ${{github.run_number}}" >> $GITHUB_ENV
                echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
              fi

        # run tests with built project
      - name: Test PR      
        run: dotnet test --no-restore --no-build --configuration $config --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        
        # upload report as build artifact
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        if: ${{always()}}
        with:
          name: 'Test Run'
          path: ${{github.workspace}}/${{env.file_name}}
        
        # add report as PR comment (if PR)
      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ${{env.file_name}}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3


      - name: Run .NET Code Analysis
        uses: dotnet/code-analysis@v1
        id: code-analysis
        with:
          solution: TOH.sln
          build-breaking: true
          all-categories: all

      # - name: Test
      #   run: dotnet test --no-restore --no-build --configuration $config --logger trx --results-directory "test-results" --no-build --verbosity normal
      
      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   id: test-results
      #   if: always()
      #   with:
      #     report_individual_runs: "true"
      #     check_run_annotations: all tests, skipped tests
      #     files: |
      #       test-results/**/*.xml
      #       test-results/**/*.trx
      # - name: output results
      #   if: always()
      #   run: ${{ toJSON(fromJSON( steps.test-results.outputs.json ).formatted) }}
      # - name: Set badge color
      #   if: always()
      #   shell: bash
      #   run: |
      #     case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
      #       success)
      #         echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
      #         ;;
      #       failure)
      #         echo "BADGE_COLOR=800000" >> $GITHUB_ENV
      #         ;;
      #       neutral)
      #         echo "BADGE_COLOR=696969" >> $GITHUB_ENV
      #         ;;
      #     esac

      # - name: Create badge
      #   if: always()
      #   uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
      #   with:
      #     label: Tests
      #     status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs_succ }} success, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs_skip }} skipped, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs_fail }} failed: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
      #     color: ${{ env.BADGE_COLOR }}
      #     path: badge.svg

      # - name: Upload badge to Gist
      #   if: always()
      #   # Upload only for main branch
      #   # if: >
      #   #   github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
      #   #   github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
      #   uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
      #   with:
      #     token: ${{ secrets.GIST_TOKEN }}
      #     gistURL: https://gist.githubusercontent.com/knass21/6faebd49908bce930bf0efe6af3b4433
      #     file: badge.svg
